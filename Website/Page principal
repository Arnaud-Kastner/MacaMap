<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Map</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
        }

        #map {
            flex: 1;
            height: 600px;
        }

        .content-container {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .search-container {
            position: relative;
            margin-bottom: 20px;
        }

        .search-bar {
            padding: 10px;
            font-size: 16px;
            width: calc(100% - 120px);
            border: 2px solid #ccc;
            border-radius: 25px;
            outline: none;
            transition: border-color 0.3s;
        }

        .search-bar:focus {
            border-color: #4CAF50;
        }

        .search-button {
            padding: 12px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .search-button:hover {
            background-color: #45a049;
        }

        .weather-info {
            background-color: #fff;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            text-align: center;
        }

        .weather-icon {
            width: 50px; /* Ajustez la taille de l'icône */
            height: 50px;
        }

        .forecast-container {
            padding: 10px;
            background-color: #f9f9f9;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .forecast-item {
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 5px;
            background-color: #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .suggestion-list {
            position: absolute;
            top: 100%;
            left: 0;
            width: calc(100% - 40px);
            background-color: #fff;
            border: 2px solid #ccc;
            border-radius: 5px;
            padding: 5px;
            z-index: 2;
            display: none;
            max-height: 200px;
            overflow-y: auto;
        }

        .suggestion-item {
            padding: 5px;
            cursor: pointer;
        }

        .suggestion-item:hover {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>

    <div class="content-container">
        <h1 style="text-align: center; font-size: 36px; color: #4CAF50; margin-bottom: 20px; text-transform: uppercase; letter-spacing: 2px; animation: blink 1s infinite;">MACAMAP</h1>

<style>
    @keyframes blink {
        0% { color: #4CAF50; }
        50% { color: #fff; }
        100% { color: #4CAF50; }
    }
</style>

        

        <!-- Barre de recherche -->
        <div class="search-container">
            <input type="text" class="search-bar" id="search-bar" placeholder="Rechercher une ville" oninput="getSuggestions()">
            <button onclick="searchCity()" class="search-button">Rechercher</button>
            <div id="suggestion-list" class="suggestion-list"></div>
        </div>

        <!-- Informations météorologiques -->
        <div id="weather-info" class="weather-info"></div>

        <!-- Prévisions météorologiques -->
        <div id="forecast-container" class="forecast-container"></div>
    </div>

    <!-- Carte Google Maps -->
    <div id="map"></div>

    <!-- Script Google Maps -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAsH7HxPLYvr6xID0U4j_DB0W_d3KJ35cM&libraries=places&callback=initMap" async defer></script>

    <script>
        var map;
        var weatherInfoWindow;
        var autocompleteService;
        var suggestionList = document.getElementById('suggestion-list');
        var marker;

        function initMap() {
            // Créer une carte Google Maps centrée sur une position par défaut
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 20, lng: 0 },
                zoom: 2
            });

            autocompleteService = new google.maps.places.AutocompleteService();

            // Ajout d'un gestionnaire d'événements pour détecter les clics sur la carte
            map.addListener('click', function(event) {
                clearMarker(); // Retirer le marqueur précédent
                placeMarker(event.latLng); // Placer un nouveau marqueur
                getWeather(event.latLng.lat(), event.latLng.lng());
            });
        }

        function getSuggestions() {
            var input = document.getElementById('search-bar').value;
            if (input.trim() === '') {
                suggestionList.style.display = 'none';
                return;
            }

            autocompleteService.getPlacePredictions({ input: input }, function(predictions, status) {
                if (status === google.maps.places.PlacesServiceStatus.OK) {
                    var suggestionsHTML = '';
                    predictions.forEach(function(prediction) {
                        suggestionsHTML += '<div class="suggestion-item" onclick="selectCity(\'' + prediction.description + '\')">' + prediction.description + '</div>';
                    });
                    suggestionList.innerHTML = suggestionsHTML;
                    suggestionList.style.display = 'block';
                } else {
                    suggestionList.style.display = 'none';
                }
            });
        }

        function selectCity(cityName) {
            document.getElementById('search-bar').value = cityName;
            suggestionList.style.display = 'none';
            clearMarker(); // Retire le marqueur précédent
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'address': cityName }, function(results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    var position = results[0].geometry.location;
                    placeMarker(position); // Place un nouveau marqueur
                    map.setCenter(position);
                    getWeather(position.lat(), position.lng());
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }

        function clearMarker() {
            if (marker) {
                marker.setMap(null);
            }
        }

        function placeMarker(location) {
            marker = new google.maps.Marker({
                position: location,
                map: map
            });
        }

        function getWeather(latitude, longitude) {
            var apiKey = 'ba95b1352e9467f155a0636c0fd4208c';
            var apiUrl = 'https://api.openweathermap.org/data/2.5/forecast?lat=' + latitude + '&lon=' + longitude + '&appid=' + apiKey + '&lang=fr';

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    console.log('Réponse de l\'API OpenWeatherMap:', data);

                    // Obtenir le nom de la ville
                    var cityName = data.city.name;

                    // Obtenir les prévisions météorologiques
                    var forecasts = data.list;

                    // Afficher les informations des prévisions météorologiques
                    showWeatherForecasts(cityName, forecasts);
                })
                .catch(error => console.error('Erreur lors de la récupération des données météorologiques:', error));
        }

        function showWeatherForecasts(cityName, forecasts) {
            var forecastContainer = document.getElementById('forecast-container');
            forecastContainer.innerHTML = ''; // Efface le contenu précédent

            // Afficher le nom de la ville
            var cityHeader = document.createElement('h2');
            cityHeader.textContent = 'Prévisions pour ' + cityName;
            forecastContainer.appendChild(cityHeader);

            forecasts.forEach(forecast => {
                // Convertir la température de Kelvin à Celsius
                var temperatureCelsius = forecast.main.temp - 273.15;

                // Formatage de la date et de l'heure
                var forecastDate = new Date(forecast.dt * 1000); // Convertir la date Unix en millisecondes
                var formattedDate = forecastDate.toLocaleDateString('fr-FR', { weekday: 'short', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' });

                // Créer un élément pour afficher les informations de prévision
                var forecastElement = document.createElement('div');
                forecastElement.classList.add('forecast-item');
                forecastElement.innerHTML = `
                    <p>${formattedDate}</p>
                    <p>Météo: ${forecast.weather[0].description}</p>
                    <p>Température: ${temperatureCelsius.toFixed(2)} °C</p>
                    <img src="http://openweathermap.org/img/wn/${forecast.weather[0].icon}.png" alt="Weather Icon" class="weather-icon">
                `;
                forecastContainer.appendChild(forecastElement);
            });
        }
    </script>

</body>
</html>


